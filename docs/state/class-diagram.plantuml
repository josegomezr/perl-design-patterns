@startuml
hide empty members

namespace PDP::State {
  Car *-- CarState.Base

  BaseState <|-- CarState.Base
  CarState.Base <|-- CarState.Driving
  CarState.Base <|-- CarState.TurnedOff
  CarState.Base <|-- CarState.TurnedOn

  class Car {
    {field} -state : BaseState
    {field} -speed : number
    {method} +state(state ?: CarState.Base) : void
    {method} +speed(speed : number) : number
    {method} +transition_to(new_state : CarState.Base) : void
    ..
    Below are the behaviors defined by each State will
    The Actor here just forwards the call to the current state.
    ..
    {method} +accelerate(new_speed : number) : void
    {method} +hit_breaks() : void
    {method} +turn_on() : void
    {method} +turn_off() : void
    {method} +drive() : void
    {method} +park() : void
  }

  abstract class BaseState {
    {field} -context : Any
    {method} +context(context Any) : Any
    {abstract} {method} +can_transition_to(new_state : BaseState) : bool
  }

  note right of BaseState::can_transition_to
    Is up to each concrete state to define the rules for
    transition with 'can_transition_to'.
  end note

  namespace CarState {
    abstract class Base {
      ..
      These are the Actor Methods that each state will handle.
      ..
      {abstract} {method} +accelerate(new_speed : number) : void
      {abstract} {method} +hit_breaks() : void
      {abstract} {method} +turn_on() : void
      {abstract} {method} +turn_off() : void
      {abstract} {method} +drive() : void
      {abstract} {method} +park() : void
    }

    class Driving {
      {method} +can_transition_to(new_state : Base) : bool
      {method} +accelerate(new_speed : number) : void
      {method} +hit_breaks() : void
      {method} +turn_on() : void
      {method} +turn_off() : void
      {method} +drive() : void
      {method} +park() : void
    }

    class TurnedOff {
      {method} +can_transition_to(new_state : Base) : bool
      {method} +accelerate(new_speed : number) : void
      {method} +hit_breaks() : void
      {method} +turn_on() : void
      {method} +turn_off() : void
      {method} +drive() : void
      {method} +park() : void
    }

    class TurnedOn {
      {method} +can_transition_to(new_state : Base) : bool
      {method} +accelerate(new_speed : number) : void
      {method} +hit_breaks() : void
      {method} +turn_on() : void
      {method} +turn_off() : void
      {method} +drive() : void
      {method} +park() : void
    }
  }
}
@enduml
